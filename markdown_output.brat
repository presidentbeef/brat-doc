includes :subprocess

markdown_output = object.new

markdown_output.init = { docs |
  my.docs = docs
  my.instance_methods = []
  my.object_methods = []
}

markdown_output.output_methods = { docs |
  mo = my.new(docs)
  mo.process("object")
  method_list = (mo.instance_methods + mo.object_methods).sort!
  method_list.each { name |
    p "- #{name}"
  }

  p "---\n"

  mo.output.join("\n\n")
}

markdown_output.prototype [
  process: { name |
    out = my
    my.output = my.docs.sort_by({ a, b |
      lhs = a[:calls].first[:method] || { a[:calls].first[:target] }
      rhs = b[:calls].first[:method] || { b[:calls].first[:target] }

      lhs < rhs
    }).map({ doc |
      true? doc[:object][:object] == name
       { out.output_method doc }
       { null }
    }).compact
  }

  output_method: { doc |
    output_name(doc) << "\n" <<
    output_calls(doc[:calls], doc[:object][:instance]) << "\n\n" <<
    output_docs(doc[:doc]) << "\n" <<
    output_examples(doc[:examples])
  }

  output_name: { doc |
    method_name = doc[:calls].first[:method] || { doc[:calls].first[:target] }
    returns = doc[:returns] || { "object" }

    "### (#{returns}) #{method_name}"
  }

  output_returns: { returns |
    "_#{returns}_"
  }

  output_calls: { calls, instance |
    out = my
    calls.map({ call |
      out.output_call call, instance
    }).join("  \n")
  }

  output_call: { call, instance |
    target = null
    meth = null

    false? call[:method]
      { meth = call[:target] }
      { meth = call[:method] }

    true? instance
      {
        false? my.instance_methods.include?(meth)
          { my.instance_methods << meth }

        false? meth == call[:target]
          { target = "_#{call[:target]}_" }
      }
      {
        false? my.object_methods.include?(meth)
          { my.object_methods << meth }

        false? meth == call[:target]
          { target = call[:target] }
      }

    true? call[:operator]
    {
      "> #{target} #{meth} _#{call[:argument]}_"
    }
    {
      null? target
        { "> #{meth} #{output_arguments call[:arguments]}" }
        { "> #{target}.#{meth} #{output_arguments call[:arguments]}" }
    }
  }

  output_arguments: { arguments |
    true? arguments
    { 
      arguments.map({ argument |
        "_#{argument}_"
      }).join(", ")
    }
    { "" }
  }

  output_docs: { docs |
    docs.map({ doc |
      doc.sub! /--\s*/, ""
      true? doc.strip == ""
        { "\n\n" }
        { doc }
    }).join(" ")
  }

  output_examples: { examples |
    mo = my
    examples.map({ example |
      true? example.array?
        { mo.output_examples example }
        { "    #{example}" }
    }).join "\n"
  }
]

export markdown_output, :markdown_output
